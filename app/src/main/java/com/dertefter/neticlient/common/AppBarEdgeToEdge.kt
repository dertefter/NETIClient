package com.dertefter.neticlient.common

import android.view.View
import android.view.ViewTreeObserver
import android.widget.FrameLayout
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import androidx.core.view.updatePadding
import com.dertefter.neticlient.R
import com.google.android.material.appbar.AppBarLayout
import com.google.android.material.appbar.MaterialToolbar

class AppBarEdgeToEdge(
    private val appBar: AppBarLayout
) : AppBarLayout.OnOffsetChangedListener, ViewTreeObserver.OnGlobalLayoutListener {

    private val childInfo = mutableListOf<ChildInfo>()
    private var statusBarInset = 0
    private var targetBottomPadding = 0

    init {
        appBar.setLiftable(false)
        setupInsets()
        appBar.addOnOffsetChangedListener(this)
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞–∫–µ—Ç–∞
        appBar.viewTreeObserver.addOnGlobalLayoutListener(this)
        targetBottomPadding = appBar.context.resources
            .getDimensionPixelSize(R.dimen.margin_min)
    }

    // ‚úÖ –ú–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–ª—É—à–∞—Ç–µ–ª–µ–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
    fun destroy() {
        appBar.removeOnOffsetChangedListener(this)
        appBar.viewTreeObserver.removeOnGlobalLayoutListener(this)
    }

    // ‚úÖ –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ –º–∞–∫–µ—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞–Ω
    override fun onGlobalLayout() {
        updateChildInfo()
    }

    private fun setupInsets() {
        ViewCompat.setOnApplyWindowInsetsListener(appBar) { view, insets ->
            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
            statusBarInset = systemBars.top

            view.updatePadding(
                top = systemBars.top,
            )

            // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            updateChildInfo()
            WindowInsetsCompat.CONSUMED
        }
    }

    private fun updateChildInfo() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —á—Ç–æ-—Ç–æ, —á—Ç–æ–±—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã –±–µ–∑ –Ω–∞–¥–æ–±–Ω–æ—Å—Ç–∏
        if (childInfo.size == appBar.childCount && childInfo.all { it.height > 0 }) {
            // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –∏ —É –≤—Å–µ—Ö —É–∂–µ –µ—Å—Ç—å –≤—ã—Å–æ—Ç–∞,
            // –º–æ–∂–Ω–æ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç—å, —á—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å. –î–ª—è –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–∂–Ω–æ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –≤—ã—Å–æ—Ç—ã.
            var hasChanged = false
            for (i in 0 until appBar.childCount){
                if (childInfo[i].height != appBar.getChildAt(i).height || childInfo[i].top != appBar.getChildAt(i).top - statusBarInset){
                    hasChanged = true
                    break
                }
            }
            if (!hasChanged) return
        }

        childInfo.clear()
        for (i in 0 until appBar.childCount) {
            val child = appBar.getChildAt(i)
            childInfo.add(ChildInfo(child.top - statusBarInset, child.height))
        }
    }

    override fun onOffsetChanged(appBarLayout: AppBarLayout, verticalOffset: Int) {
        val totalRange = appBarLayout.totalScrollRange
        if (totalRange == 0) return

        val scroll = -verticalOffset
        val progress = scroll.toFloat() / totalRange

        // üí° –≠—Ç—É –ª–æ–≥–∏–∫—É –º–æ–∂–Ω–æ —É–ø—Ä–æ—Å—Ç–∏—Ç—å. –û–Ω–∞ –æ—á–µ–Ω—å —Ö—Ä—É–ø–∫–∞—è.
        // –õ—É—á—à–µ –¥–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ ID –∏ –∏—Å–∫–∞—Ç—å –µ–≥–æ –ø–æ ID,
        // –∞ –Ω–µ –ø–æ–ª–∞–≥–∞—Ç—å—Å—è –Ω–∞ –∏–µ—Ä–∞—Ä—Ö–∏—é –∏ —Ç–∏–ø—ã View.
        val lastChild = appBar.getChildAt(appBar.childCount - 1)
        if (lastChild !is MaterialToolbar) {
            val isToolbarContainer = lastChild is FrameLayout && lastChild.getChildAt(0) is MaterialToolbar
            if (!isToolbarContainer) {
                val newBottomPadding = (targetBottomPadding * progress).toInt()
                appBar.updatePadding(bottom = newBottomPadding)
            }
        }

        if (childInfo.size != appBar.childCount) {
            // –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º
            updateChildInfo()
        }

        for (i in 0 until appBar.childCount) {
            val view = appBar.getChildAt(i)
            val (top, height) = childInfo.getOrNull(i) ?: continue
            if (height == 0) continue

            val hidden = (scroll - top).coerceIn(0, height)
            val alpha = 1f - (hidden.toFloat() / height * 1.5f)
            val scale = 1f - (hidden.toFloat() / height) / 10

            view.alpha = alpha.coerceIn(0f, 1f)
            view.scaleX = scale.coerceIn(0f, 1f)
            view.scaleY = scale.coerceIn(0f, 1f)
        }
        appBar.isLifted = scroll == totalRange
    }

    private data class ChildInfo(val top: Int, val height: Int)
}